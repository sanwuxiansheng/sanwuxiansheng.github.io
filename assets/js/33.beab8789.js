(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{232:function(v,_,i){"use strict";i.r(_);var l=i(0),e=Object(l.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"浏览器缓存及其机制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存及其机制"}},[v._v("#")]),v._v(" 浏览器缓存及其机制")]),v._v(" "),i("h2",{attrs:{id:"浏览器存储"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#浏览器存储"}},[v._v("#")]),v._v(" 浏览器存储")]),v._v(" "),i("ul",[i("li",[v._v("SessionStorage, LocalStorage, Cookie这三者都可以被用来在浏览器端存储数据，而且都是字符串类型的键值对！")]),v._v(" "),i("li",[v._v("(另外一种存储模式叫：session;这种级别的存储属于服务端会话级别的存储)")])]),v._v(" "),i("h2",{attrs:{id:"web-storage"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#web-storage"}},[v._v("#")]),v._v(" Web Storage")]),v._v(" "),i("ul",[i("li",[v._v("SessionStorage和LocalStorage都是本地存储，不会被发送到服务器上。同时空间比Cookie大很多，一般支持5-10M")]),v._v(" "),i("li",[v._v("浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。\n"),i("ul",[i("li",[v._v("Storage.getItem('key');\n"),i("ul",[i("li",[v._v("该方法接受一个键名作为参数，返回键名对应的值。")])])]),v._v(" "),i("li",[v._v("Storage.setItem('key', 'value');\n"),i("ul",[i("li",[v._v("该方法接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。")])])]),v._v(" "),i("li",[v._v("Storage.removeItem('key');\n"),i("ul",[i("li",[v._v("该方法接受一个键名作为参数，并把该键名从存储中删除。")])])]),v._v(" "),i("li",[v._v("Storage.clear()\n"),i("ul",[i("li",[v._v("调用该方法会清空存储中的所有键名")]),v._v(" "),i("li",[v._v("storage事件：\n"),i("ul",[i("li",[v._v("Storage 对象发生变化时（即创建/更新/删除数据项时，重复设置相同的键值不会触发该事件，Storage.clear() 方法至多触发一次该事件）会触发")])])]),v._v(" "),i("li",[v._v("在同一个页面内发生的改变不会起作用")]),v._v(" "),i("li",[v._v("在相同域名下的其他页面发生的改变才会起作用。(修改的页面不会触发事件，与它共享的页面会触发事件)")])])])])]),v._v(" "),i("li",[v._v("区别\n"),i("ul",[i("li",[v._v("LocalStorage是浏览器本地持久化存储技术，也叫永久存储")]),v._v(" "),i("li",[v._v("SessionStorage是浏览器本地临时存储技术，也叫会话存储")])])])]),v._v(" "),i("h2",{attrs:{id:"indexdb和websql"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#indexdb和websql"}},[v._v("#")]),v._v(" IndexDB和WebSQL")]),v._v(" "),i("ul",[i("li",[v._v("IndexedDB 和 WebSQL 都是一种低级API，用于客户端存储大量结构化数据。")]),v._v(" "),i("li",[v._v("该API使用索引来实现对该数据的高性能搜索。")]),v._v(" "),i("li",[v._v("不同的是IndexedDB是非关系型，而WebSQL是关系型。")]),v._v(" "),i("li",[v._v("WebSQL官方不在维护，但兼容性较好")]),v._v(" "),i("li",[v._v("IndexedDB在维护，兼容性较差")])]),v._v(" "),i("h2",{attrs:{id:"缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[v._v("#")]),v._v(" 缓存")]),v._v(" "),i("ul",[i("li",[v._v("缓存可以重用已获取的资源能够有效的提升网站与应用的性能。")]),v._v(" "),i("li",[v._v("Web 缓存能够减少延迟与网络阻塞，进而减少显示某个资源所用的时间。")]),v._v(" "),i("li",[v._v("借助 HTTP 缓存，Web 站点变得更具有响应性。")]),v._v(" "),i("li",[v._v("缓存分为两点：强制缓存和协商缓存")])]),v._v(" "),i("h2",{attrs:{id:"强制缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[v._v("#")]),v._v(" 强制缓存")]),v._v(" "),i("ul",[i("li",[v._v("概念\n"),i("ul",[i("li",[v._v("强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。")]),v._v(" "),i("li",[v._v("简单来讲就是强制浏览器使用当前缓存")])])]),v._v(" "),i("li",[v._v("实现：通过服务器端设置响应头字段来控制\n"),i("ul",[i("li",[v._v("expires (http1.0)")]),v._v(" "),i("li",[v._v("cache-control (http1.1)")]),v._v(" "),i("li",[v._v("cache-control 优先级比 expires 高")])])]),v._v(" "),i("li",[v._v("expires\n"),i("ul",[i("li",[v._v("日期（new Date().toGMTString()） 缓存的最大有效时间")])])]),v._v(" "),i("li",[v._v("cache-control\n"),i("ul",[i("li",[v._v("max-age(单位s)   缓存的最大有效时间")]),v._v(" "),i("li",[v._v("no-cache        使用协商缓存")]),v._v(" "),i("li",[v._v("no-store        不使用任何缓存")]),v._v(" "),i("li",[v._v("public          （客户端、代理服务器）缓存所有资源")]),v._v(" "),i("li",[v._v("private         默认值，只有客户端缓存所有资源")])])])]),v._v(" "),i("h2",{attrs:{id:"协商缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),i("ul",[i("li",[v._v("概念\n"),i("ul",[i("li",[v._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。")])])]),v._v(" "),i("li",[v._v("实现：\n"),i("ul",[i("li",[v._v("Last-Modified / If-Modified-Since")]),v._v(" "),i("li",[v._v("Etag / If-None-Match")]),v._v(" "),i("li",[v._v("Etag / If-None-Match 优先级比 Last-Modified / If-Modified-Since 高。")])])]),v._v(" "),i("li",[v._v("Last-modified\n"),i("ul",[i("li",[v._v("记录服务器返回资源的最后修改时间")]),v._v(" "),i("li",[v._v("由客户端发送给服务器")])])]),v._v(" "),i("li",[v._v("If-Modified-Since\n"),i("ul",[i("li",[v._v("记录服务器返回资源的最后修改时间")]),v._v(" "),i("li",[v._v("由服务器发送给客户端")])])]),v._v(" "),i("li",[v._v("Etag\n"),i("ul",[i("li",[v._v("当前文件的唯一标识（由服务器生成）")]),v._v(" "),i("li",[v._v("由客户端发送给服务器")])])]),v._v(" "),i("li",[v._v("If-None-Match\n"),i("ul",[i("li",[v._v("当前文件的唯一标识（由服务器生成）")]),v._v(" "),i("li",[v._v("由服务器发送给客户端")])])]),v._v(" "),i("li",[v._v("工作流程：\n"),i("ul",[i("li",[v._v("第一次：由服务器返回 If-None-Match 和 If-Modified-Since 字段通过响应头方式返回")]),v._v(" "),i("li",[v._v("第二次：下次浏览器请求时，携带了Etag（值为上一次的If-None-Match的值）和 Last-modified（值为上一次的If-None-Since的值）发送给服务器")]),v._v(" "),i("li",[v._v("服务器先检查Etag是否等于最新的If-None-Match的值，如果相等直接走浏览器本地缓存，不相等就返回新的资源")]),v._v(" "),i("li",[v._v("如果没有Etag，才看Last-modified的值，检查Last-modified是否等于最新的If-None-Since的值，如果相等直接走浏览器本地缓存，不相等就返回新的资源")])])])]),v._v(" "),i("h2",{attrs:{id:"缓存返回值"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#缓存返回值"}},[v._v("#")]),v._v(" 缓存返回值")]),v._v(" "),i("ul",[i("li",[v._v("200(from memory cache)\n"),i("ul",[i("li",[v._v("命中强制缓存")]),v._v(" "),i("li",[v._v("缓存来自于内存")])])]),v._v(" "),i("li",[v._v("200(from disk cache)\n"),i("ul",[i("li",[v._v("命中强制缓存")]),v._v(" "),i("li",[v._v("缓存来自于磁盘")])])]),v._v(" "),i("li",[v._v("304 Not Modified\n"),i("ul",[i("li",[v._v("命中协商缓存")])])]),v._v(" "),i("li",[v._v("200\n"),i("ul",[i("li",[v._v("没有命中缓存")])])])]),v._v(" "),i("h2",{attrs:{id:"总结缓存策略"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#总结缓存策略"}},[v._v("#")]),v._v(" 总结缓存策略")]),v._v(" "),i("ol",[i("li",[v._v("强制缓存")])]),v._v(" "),i("ul",[i("li",[v._v("Expires  cache-control")]),v._v(" "),i("li",[v._v("不会重新发送请求，直接走缓存")])]),v._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[v._v("协商缓存")])]),v._v(" "),i("ul",[i("li",[v._v("last-modified和etag if-modified-since和if-None-Match")]),v._v(" "),i("li",[v._v("通常和cache-control配合使用，no-cached，会再次发送请求，由服务器判断请求资源是否走缓存，\n"),i("ul",[i("li",[v._v("如果走 返回 304 Not Modefined")]),v._v(" "),i("li",[v._v("如果不走缓存 返回新的资源")])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);