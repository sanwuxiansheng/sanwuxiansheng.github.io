(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{223:function(r,a,t){"use strict";t.r(a);var e=t(0),l=Object(e.a)({},(function(){var r=this,a=r.$createElement,t=r._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"数组常用的一些方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组常用的一些方法"}},[r._v("#")]),r._v(" 数组常用的一些方法")]),r._v(" "),t("h4",{attrs:{id:"array-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-from"}},[r._v("#")]),r._v(" Array.from")]),r._v(" "),t("ul",[t("li",[r._v("Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。")]),r._v(" "),t("li",[r._v("语法\n"),t("ul",[t("li",[r._v("Array.from(arrayLike[, mapFn[, thisArg]])")])])]),r._v(" "),t("li",[r._v("参数\n"),t("ul",[t("li",[r._v("arrayLike:想要转换成数组的伪数组对象或可迭代对象。")]),r._v(" "),t("li",[r._v("mapFn (可选参数):如果指定了该参数，新数组中的每个元素会执行该回调函数。")]),r._v(" "),t("li",[r._v("thisArg (可选参数):可选参数，执行回调函数 mapFn 时 this 对象。")])])]),r._v(" "),t("li",[r._v("返回值\n"),t("ul",[t("li",[r._v("一个新的数组实例")])])])]),r._v(" "),t("h4",{attrs:{id:"array​-isarray"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-isarray"}},[r._v("#")]),r._v(" Array​.isArray()")]),r._v(" "),t("ul",[t("li",[r._v("Array.isArray() 用于确定传递的值是否是一个 Array。")]),r._v(" "),t("li",[r._v("返回布尔值，是--\x3etrue 否--\x3efalse")])]),r._v(" "),t("h4",{attrs:{id:"array-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-of"}},[r._v("#")]),r._v(" Array.of()")]),r._v(" "),t("ul",[t("li",[r._v("Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。")]),r._v(" "),t("li",[r._v("Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为7的空数组（注意：这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组）。")]),r._v(" "),t("li",[r._v("示例\n"),t("ul",[t("li",[r._v("Array.of(1);         // [1]")]),r._v(" "),t("li",[r._v("Array.of(1, 2, 3);   // [1, 2, 3]")]),r._v(" "),t("li",[r._v("Array.of(undefined); // [undefined]")])])])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-foreach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-foreach"}},[r._v("#")]),r._v(" Array​.prototype​.forEach()")]),r._v(" "),t("ul",[t("li",[r._v("forEach() 方法对数组的每个元素执行一次提供的函数。")]),r._v(" "),t("li",[r._v("参数1:callback\n为数组中每个元素执行的函数，该函数接收三个参数：\n"),t("ul",[t("li",[r._v("currentValue(当前值):数组中正在处理的当前元素。")]),r._v(" "),t("li",[r._v("index(索引):数组中正在处理的当前元素的索引。")]),r._v(" "),t("li",[r._v("array:forEach()方法正在操作的数组。")])])]),r._v(" "),t("li",[r._v("参数2:thisArg\n可选参数。当执行回调 函数时用作this的值")]),r._v(" "),t("li",[r._v("返回值：undefined")]),r._v(" "),t("li",[r._v("是否影响老数组：由callback决定")]),r._v(" "),t("li",[r._v("简而言之就是遍历数组")])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-push"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-push"}},[r._v("#")]),r._v(" Array​.prototype​.push()")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("push() 方法将一个或多个元素添加到数组的末尾，并返回新数组的长度")])]),r._v(" "),t("li",[t("p",[r._v("语法：arr.push(element1, ..., elementN)")])]),r._v(" "),t("li",[t("p",[r._v("参数:被添加到数组末尾的元素")])]),r._v(" "),t("li",[t("p",[r._v("返回值：当调用该方法时，新的 length 属性值将被返回")])]),r._v(" "),t("li",[t("p",[r._v("是否影响老数组：影响")]),r._v(" "),t("pre",[t("code",[r._v('  var arr =[1,2,3,4];\n  var res = arr.push("5",true,{})\n  console.log(arr,res)//[1,2,3,4,"5",true,{}]\n')])])])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-map"}},[r._v("#")]),r._v(" Array​.prototype​.map()")]),r._v(" "),t("ul",[t("li",[r._v("map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果")]),r._v(" "),t("li",[r._v("参数1:callback\n为数组中每个元素执行的函数，该函数接收三个参数：\n"),t("ul",[t("li",[r._v("currentValue(当前值):数组中正在处理的当前元素。")]),r._v(" "),t("li",[r._v("index(索引):数组中正在处理的当前元素的索引。")]),r._v(" "),t("li",[r._v("array:forEach()方法正在操作的数组。")])])]),r._v(" "),t("li",[r._v("参数2:thisArg\n可选参数。当执行回调 函数时用作this的值。")]),r._v(" "),t("li",[r._v("返回值：一个新数组，每个元素都是回调函数的结果。")]),r._v(" "),t("li",[r._v("是否影响老数组：不影响")])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-pop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-pop"}},[r._v("#")]),r._v(" Array​.prototype​.pop()")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度")])]),r._v(" "),t("li",[t("p",[r._v("语法：arr.pop()")])]),r._v(" "),t("li",[t("p",[r._v("参数：无")])]),r._v(" "),t("li",[t("p",[r._v("返回值：从数组中删除的元素(当数组为空时返回undefined)")])]),r._v(" "),t("li",[t("p",[r._v("是否影响老数组：影响")]),r._v(" "),t("pre",[t("code",[r._v('  var arr =[1,2,3,"abc"];\n  var result = arr.pop();\n  console.log(result,arr);//[1,2,3]\n')])])])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-every"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-every"}},[r._v("#")]),r._v(" Array​.prototype​.every()")]),r._v(" "),t("ul",[t("li",[r._v("every() 方法测试数组的所有元素是否都通过了指定函数的测试")]),r._v(" "),t("li",[r._v("参数1:callback\n为数组中每个元素执行的函数，该函数接收三个参数：\n"),t("ul",[t("li",[r._v("currentValue(当前值):数组中正在处理的当前元素。")]),r._v(" "),t("li",[r._v("index(索引):数组中正在处理的当前元素的索引。")]),r._v(" "),t("li",[r._v("array:forEach()方法正在操作的数组。")])])]),r._v(" "),t("li",[r._v("参数2:thisArg\n"),t("ul",[t("li",[r._v("可选参数。当执行回调 函数时用作this的值。")])])]),r._v(" "),t("li",[r._v("返回值：true false")]),r._v(" "),t("li",[r._v("是否影响老数组：不影响")])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-sort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-sort"}},[r._v("#")]),r._v(" Array​.prototype​.sort()")]),r._v(" "),t("ul",[t("li",[r._v("sort() 方法使用in-place算法对数组的元素进行排序，并返回数组。\n默认排序顺序是根据字符串Unicode码点。")]),r._v(" "),t("li",[r._v("sort()参数compareFunction 可选。\n用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。")]),r._v(" "),t("li",[r._v("返回值：返回排序后的数组。")]),r._v(" "),t("li",[r._v("是否影响老数组： 影响 原数组已经被排序后的数组代替。")])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-join"}},[r._v("#")]),r._v(" Array​.prototype​.join()")]),r._v(" "),t("ul",[t("li",[r._v("join() 方法将一个数组的所有元素连接成一个字符串并返回这个字符串")]),r._v(" "),t("li",[r._v("语法：arr.join(separator)")]),r._v(" "),t("li",[r._v('参数：separator ---\x3e 指定一个字符串来分隔数组的每个元素。如果省略()，数组元素用逗号分隔。默认为 ","。')]),r._v(" "),t("li",[r._v("返回值：一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串")]),r._v(" "),t("li",[r._v("是否影响老数组：不影响")]),r._v(" "),t("li",[t("pre",[t("code",[r._v('  var arr =[1,2,1,4];\n  var result = arr.join("damu");\n  console.log(result,arr);//1damu2damu1damu4,[1,2,1,4]\n')])])])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-reverse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-reverse"}},[r._v("#")]),r._v(" Array​.prototype​.reverse()")]),r._v(" "),t("ul",[t("li",[r._v("reverse() 方法颠倒数组中元素的位置，并返回该数组的引用")]),r._v(" "),t("li",[r._v("语法： arr.reverse()")]),r._v(" "),t("li",[r._v("参数：无")]),r._v(" "),t("li",[r._v("返回值：该数组的引用。")]),r._v(" "),t("li",[r._v("是否影响老数组：影响")])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-reduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-reduce"}},[r._v("#")]),r._v(" Array​.prototype​.reduce()")]),r._v(" "),t("ul",[t("li",[r._v("reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。")]),r._v(" "),t("li",[r._v("参数1:callback 为数组中每个元素执行的函数，该函数接收三个参数：\n"),t("ul",[t("li",[r._v("accumulator(当前值):累加器累加回调的返回值; 它是上一次调用回调时返回的累积值")]),r._v(" "),t("li",[r._v("currentValue:数组中正在处理的元素。")]),r._v(" "),t("li",[r._v("currentIndex可选:数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。")]),r._v(" "),t("li",[r._v("array可选：调用reduce的数组。")])])]),r._v(" "),t("li",[r._v("参数2:initialValue 用作第一个调用 callback的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。")]),r._v(" "),t("li",[r._v("返回值：  累加器")]),r._v(" "),t("li",[r._v("是否影响老数组：不影响")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("//数组里所有值的和\nvar arr =[2, 1, 2, 3];\nvar sum = arr.reduce(function (a,b,index,arr) {\nconsole.log(a)\nreturn a + b;\n},0);\nconsole.log(sum);//7\nconsole.log(arr);[2, 1, 2, 3]\n")])])]),t("h4",{attrs:{id:"array​-prototype​-tostring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-tostring"}},[r._v("#")]),r._v(" Array​.prototype​.toString()")]),r._v(" "),t("ul",[t("li",[r._v("toString() 返回一个字符串，表示指定的数组及其元素。")]),r._v(" "),t("li",[r._v("语法：arr.toString()")]),r._v(" "),t("li",[r._v("参数：无")]),r._v(" "),t("li",[r._v("返回值：返回一个字符串。")]),r._v(" "),t("li",[r._v("是否影响老数组：不影响")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("\t\tvar arr =[1,2,3,4];\n\t\tvar result = arr.toString();\n\t\tconsole.log(result,arr);//1234,[1,2,3,4]\n")])])]),t("h4",{attrs:{id:"array​-prototype​-concat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-concat"}},[r._v("#")]),r._v(" Array​.prototype​.concat()")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。")])]),r._v(" "),t("li",[t("p",[r._v("描述")]),r._v(" "),t("ul",[t("li",[r._v("concat方法创建一个新的数组，它由被调用的对象中的元素组成，每个参数的顺序依次是该参数的元素（如果参数是数组）或参数本身（如果参数不是数组）。它不会递归到嵌套数组参数中。")])])]),r._v(" "),t("li",[t("p",[r._v("concat方法不会改变this或任何作为参数提供的数组，而是返回一个浅拷贝，它包含与原始数组相结合的相同元素的副本。 原始数组的元素将复制到新数组中，如下所示：")])]),r._v(" "),t("li",[t("p",[r._v("对象引用（而不是实际对象）：")]),r._v(" "),t("ul",[t("li",[r._v("concat将对象引用复制到新数组中。 原始数组和新数组都引用相同的对象。 也就是说，如果引用的对象被修改，则更改对于新数组和原始数组都是可见的。 这包括也是数组的数组参数的元素。")]),r._v(" "),t("li",[r._v("数据类型如字符串，数字和布尔（不是String，Number 和 Boolean 对象）：concat将字符串和数字的值复制到新数组中。")])])]),r._v(" "),t("li",[t("p",[r._v("两个数组合并")])])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var alpha = ['a', 'b', 'c'];\nvar numeric = [1, 2, 3];\nalpha.concat(numeric);\n")])])]),t("ul",[t("li",[r._v("三个或多个数组合并")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var num1 = [1, 2, 3],\n    num2 = [4, 5, 6],\n    num3 = [7, 8, 9];\nvar nums = num1.concat(num2, num3);\n")])])]),t("h4",{attrs:{id:"array​-prototype​-copy​within"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-copy​within"}},[r._v("#")]),r._v(" Array​.prototype​.copy​Within()")]),r._v(" "),t("ul",[t("li",[r._v("copyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。")]),r._v(" "),t("li",[r._v("语法\n"),t("ul",[t("li",[r._v("arr.copyWithin(target[, start[, end]])")])])]),r._v(" "),t("li",[r._v("参数\n"),t("ul",[t("li",[r._v("target:0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。\n如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。")]),r._v(" "),t("li",[r._v("start:0 为基底的索引，开始复制元素的起始位置。如果是负数，start 将从末尾开始计算。\n如果 start 被忽略，copyWithin 将会从0开始复制。")]),r._v(" "),t("li",[r._v("end:\n0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。\n如果 end 被忽略，copyWithin 方法将会一直复制至数组结尾（默认为 arr.length）。")])])]),r._v(" "),t("li",[r._v("返回值:改变后的数组。")])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-fill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-fill"}},[r._v("#")]),r._v(" Array​.prototype​.fill()")]),r._v(" "),t("ul",[t("li",[r._v("fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。")]),r._v(" "),t("li",[r._v("语法\n"),t("ul",[t("li",[r._v("arr.fill(value, start, end)")])])]),r._v(" "),t("li",[r._v("参数\n"),t("ul",[t("li",[r._v("value:用来填充数组元素的值。")]),r._v(" "),t("li",[r._v("start 可选:起始索引，默认值为0。")]),r._v(" "),t("li",[r._v("end 可选:终止索引，默认值为 this.length。")])])]),r._v(" "),t("li",[r._v("返回值：修改后的数组")])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-every-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-every-2"}},[r._v("#")]),r._v(" Array​.prototype​.every()")]),r._v(" "),t("ul",[t("li",[r._v("every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。")]),r._v(" "),t("li",[t("strong",[r._v("注意：若收到一个空数组，此方法在一切情况下都会返回 true。")])]),r._v(" "),t("li",[r._v("案例：\n"),t("ul",[t("li",[r._v("检测所有数组元素的大小节")]),r._v(" "),t("li",[r._v("下例检测数组中的所有元素是否都大于 10。")])])])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("function isBigEnough(element, index, array) {\n  return element >= 10;\n}\n[12, 5, 8, 130, 44].every(isBigEnough);   // false\n[12, 54, 18, 130, 44].every(isBigEnough); // true\n")])])]),t("h4",{attrs:{id:"array​-prototype​-find"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-find"}},[r._v("#")]),r._v(" Array​.prototype​.find()")]),r._v(" "),t("ul",[t("li",[r._v("find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。")]),r._v(" "),t("li",[r._v("语法\n"),t("ul",[t("li",[r._v("arr.find(callback, thisArg)")])])]),r._v(" "),t("li",[r._v("参数\n"),t("ul",[t("li",[r._v("callback:在数组每一项上执行的函数，接收 3 个参数：")]),r._v(" "),t("li",[r._v("element:当前遍历到的元素。")]),r._v(" "),t("li",[r._v("index可选:当前遍历到的索引。")]),r._v(" "),t("li",[r._v("array可选：数组本身。")]),r._v(" "),t("li",[r._v("thisArg可选：执行回调时用作this 的对象。")])])]),r._v(" "),t("li",[r._v("返回值：数组中第一个满足所提供测试函数的元素的值，否则返回 undefined。")]),r._v(" "),t("li",[r._v("案例")]),r._v(" "),t("li")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var array1 = [5, 12, 8, 130, 44];\nvar found = array1.find(function(element) {\n  return element > 10;\n});\nconsole.log(found);\n// expected output: 12\n")])])]),t("h4",{attrs:{id:"array​-prototype​-find​index"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-find​index"}},[r._v("#")]),r._v(" Array​.prototype​.find​Index()")]),r._v(" "),t("ul",[t("li",[r._v("findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。")]),r._v(" "),t("li",[r._v("用法与find()方法一样只是返回值不同")])]),r._v(" "),t("h4",{attrs:{id:"array​-prototype​-indexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-indexof"}},[r._v("#")]),r._v(" Array​.prototype​.indexOf()")]),r._v(" "),t("ul",[t("li",[r._v("indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。")]),r._v(" "),t("li",[r._v("语法：arr.indexOf(searchElement, fromIndex = 0)")]),r._v(" "),t("li",[r._v("参数：\n"),t("ul",[t("li",[r._v("searchElement被查找的元素。")]),r._v(" "),t("li",[r._v("fromIndex：从此位置开始逆向查找。默认为数组的长度减 1，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。")])])]),r._v(" "),t("li",[r._v("返回值：数组中第一个符合条件的元素的索引，如未找到返回-1")]),r._v(" "),t("li",[r._v("案例")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];\nconsole.log(animals.indexOf('Dodo'));\n// expected output: 1\nconsole.log(animals.indexOf('Tiger'));\n// expected output: 1\n")])])]),t("h4",{attrs:{id:"array​-prototype​-last​indexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-last​indexof"}},[r._v("#")]),r._v(" Array​.prototype​.last​IndexOf()")]),r._v(" "),t("ul",[t("li",[r._v("lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。")]),r._v(" "),t("li",[r._v("语法：arr.lastIndexOf(searchElement[, fromIndex = arr.length - 1])")]),r._v(" "),t("li",[r._v("参数：\n"),t("ul",[t("li",[r._v("searchElement被查找的元素。")]),r._v(" "),t("li",[r._v("fromIndex：从此位置开始逆向查找。默认为数组的长度减 1，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。")])])]),r._v(" "),t("li",[r._v("返回值：数组中最后一个元素的索引，如未找到返回-1")]),r._v(" "),t("li",[r._v("案例")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];\nconsole.log(animals.lastIndexOf('Dodo'));\n// expected output: 3\nconsole.log(animals.lastIndexOf('Tiger'));\n// expected output: 1\n")])])]),t("h4",{attrs:{id:"array​-prototype​-splice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-splice"}},[r._v("#")]),r._v(" Array​.prototype​.splice()")]),r._v(" "),t("ul",[t("li",[r._v("splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。")]),r._v(" "),t("li",[r._v("语法：array.splice(start, deleteCount, item1, item2, ...)")]),r._v(" "),t("li",[r._v("参数\n"),t("ul",[t("li",[r._v("start：指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数，这意味着-n是倒数第n个元素并且等价于array.length-n）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。")]),r._v(" "),t("li",[r._v("deleteCount 可选：整数，表示要移除的数组元素的个数。\n如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。\n如果 deleteCount 被省略了，或者它的值大于等于array.length - start(也就是说，如果它大于或者等于start之后的所有元素的数量)，那么start之后数组的所有元素都会被删除。\n如果 deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。")]),r._v(" "),t("li",[r._v("item1, item2, ... 可选：要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。")])])]),r._v(" "),t("li",[r._v("返回值：由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。")]),r._v(" "),t("li",[r._v("案例\n"),t("ul",[t("li",[r._v("从第 2 位开始删除 0 个元素，插入“drum”节")])])])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('var myFish = ["angel", "clown", "mandarin", "sturgeon"];\nvar removed = myFish.splice(2, 0, "drum");\n// 运算后的 myFish: ["angel", "clown", "drum", "mandarin", "sturgeon"]\n// 被删除的元素: [], 没有元素被删除\n\t* 从第 2 位开始删除 0 个元素，插入“drum” 和 "guitar"节\nvar myFish = [\'angel\', \'clown\', \'mandarin\', \'sturgeon\'];\nvar removed = myFish.splice(2, 0, \'drum\', \'guitar\');\n// 运算后的 myFish: ["angel", "clown", "drum", "guitar", "mandarin", "sturgeon"]\n// 被删除的元素: [], 没有元素被删除\n')])])]),t("ul",[t("li",[r._v("从第 3 位开始删除 1 个元素节")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var myFish = ['angel', 'clown', 'drum', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(3, 1);\n// 运算后的 myFish: [\"angel\", \"clown\", \"drum\", \"sturgeon\"]\n// 被删除的元素: [\"mandarin\"]\n")])])]),t("ul",[t("li",[r._v("从第 2 位开始删除 1 个元素，插入“trumpet”节")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('var myFish = [\'angel\', \'clown\', \'drum\', \'sturgeon\'];\nvar removed = myFish.splice(2, 1, "trumpet");\n// 运算后的 myFish: ["angel", "clown", "trumpet", "sturgeon"]\n// 被删除的元素: ["drum"]\n')])])]),t("ul",[t("li",[r._v('从第 0 位开始删除 2 个元素，插入"parrot"、"anemone"和"blue"节')])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var myFish = ['angel', 'clown', 'trumpet', 'sturgeon'];\nvar removed = myFish.splice(0, 2, 'parrot', 'anemone', 'blue');\n// 运算后的 myFish: [\"parrot\", \"anemone\", \"blue\", \"trumpet\", \"sturgeon\"]\n// 被删除的元素: [\"angel\", \"clown\"]\n")])])]),t("ul",[t("li",[r._v("从第 2 位开始删除 2 个元素节")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var myFish = ['parrot', 'anemone', 'blue', 'trumpet', 'sturgeon'];\nvar removed = myFish.splice(myFish.length - 3, 2);\n// 运算后的 myFish: [\"parrot\", \"anemone\", \"sturgeon\"]\n// 被删除的元素: [\"blue\", \"trumpet\"]\n")])])]),t("ul",[t("li",[r._v("从倒数第 2 位开始删除 1 个元素节")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(-2, 1);\n// 运算后的 myFish: [\"angel\", \"clown\", \"sturgeon\"]\n// 被删除的元素: [\"mandarin\"]\n")])])]),t("ul",[t("li",[r._v("从第 2 位开始删除所有元素节")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(2);\n// 运算后的 myFish: [\"angel\", \"clown\"]\n// 被删除的元素: [\"mandarin\", \"sturgeon\"]\n")])])]),t("h4",{attrs:{id:"array​-prototype​-shift"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-shift"}},[r._v("#")]),r._v(" Array​.prototype​.shift()")]),r._v(" "),t("ul",[t("li",[r._v("shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。")]),r._v(" "),t("li",[r._v("返回值:从数组中删除的元素; 如果数组为空则返回undefined 。")]),r._v(" "),t("li",[r._v("案例")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("var array1 = [1, 2, 3];\nvar firstElement = array1.shift();\nconsole.log(array1);\n// expected output: Array [2, 3]\nconsole.log(firstElement);\n// expected output: 1 \n")])])]),t("h4",{attrs:{id:"array​-prototype​-unshift"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype​-unshift"}},[r._v("#")]),r._v(" Array​.prototype​.unshift()")]),r._v(" "),t("ul",[t("li",[r._v("unshift() 方法将一个或多个元素添加到数组的开头，并返回新数组的长度")]),r._v(" "),t("li",[r._v("语法：arr.unshift(element1, ..., elementN)")]),r._v(" "),t("li",[r._v("参数：要添加到数组开头的元素")]),r._v(" "),t("li",[r._v("返回值：当一个对象调用该方法时，返回其 新的length 属性值")]),r._v(" "),t("li",[r._v("是否影响老数组：影响")])]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("\t\tvar arr =[1,2,3,4];\n\t\tvar result = arr.unshift(0,-9);\n\t\tconsole.log(result,arr);//[1,2,3,4,0,-9]\n")])])]),t("h4",{attrs:{id:"array​-prototype-entries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array​-prototype-entries"}},[r._v("#")]),r._v(" Array​.prototype.entries()")]),r._v(" "),t("ul",[t("li",[r._v("entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。")]),r._v(" "),t("li",[r._v("语法\n"),t("ul",[t("li",[r._v("arr.entries()")])])]),r._v(" "),t("li",[r._v("返回值:\n一个新的 Array 迭代器对象。Array Iterator是对象，它的原型（"),t("strong",[r._v("proto")]),r._v(":Array Iterator）上有一个next方法，可用用于遍历迭代器取得原数组的[key,value]。")])])])}),[],!1,null,null,null);a.default=l.exports}}]);