(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{230:function(e,n,t){"use strict";t.r(n);var a=t(0),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"vue移动端支付"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue移动端支付"}},[e._v("#")]),e._v(" vue移动端支付")]),e._v(" "),t("h4",{attrs:{id:"一、支付宝支付"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、支付宝支付"}},[e._v("#")]),e._v(" 一、支付宝支付")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("其实支付宝支付也有支付宝环境和非支付宝环境，这里只做了非支付宝环境即可满足项目需求")])]),e._v(" "),t("li",[t("p",[e._v("支付宝中的H5支付和PC端的一样，主要是后端的工作量，后端完成订单的生成之后返给前端的是form表单，前端只需要负责做页面的跳转即可：")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n//立即支付按钮\nonSubmit() {\n    if (this.payWay == 1) {\n    \t//支付宝支付\n      \tthis.$router.push({path: '/aliPay', query: {orderId: this.orderId}});\n    } else if (this.payWay == 2) {\n     //微信支付\n    }\n}\n")])])]),t("ul",[t("li",[e._v("选择支付宝方式之后进入支付宝承载页面：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<template>\n  <div v-html=\"html\"></div>\n</template>\n<script>\n    import {reqAlipay} from '../../api';\n    export default {\n      data(){\n        return{\n          html:''\n        }\n      },\n      methods:{\n        async fetchVideoPay(){\n          let order_code = this.$route.query.order_code;\n          let asv_coupon_id = this.$route.query.asv_coupon_id;\n          let token = this.$route.query.token;\n          const alipay = await reqAlipay(order_code, asv_coupon_id, token)\n          // console.log(alipay);\n          // if (alipay.errno == '10000') {\n            this.html = alipay;\n            this.$nextTick(() => {\n              document.forms[0].submit()   //渲染支付宝支付页面\n            })\n            // console.log('渲染页面');\n          // } else {\n            \n          // }\n        }\n      },\n      mounted(){\n        this.fetchVideoPay()\n      }\n    }\n<\/script>\n<style lang='stylus' rel='stylesheet/stylus' scoped>\n</style>\n")])])]),t("ul",[t("li",[e._v("进入到支付宝支付页（至此但有一个问题，调起支付后，用户中途取消支付或者点返回键会整个网页一起关闭退出，或者一直在进入支付页面，不知道有没有更好的SEO方案）")])]),e._v(" "),t("h4",{attrs:{id:"二、微信支付"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、微信支付"}},[e._v("#")]),e._v(" 二、微信支付")]),e._v(" "),t("ul",[t("li",[e._v("先判断是否是微信环境")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("is_weixn(){\n  var ua = window.navigator.userAgent.toLowerCase();\n  if (ua.match(/MicroMessenger/i) == 'micromessenger'){\n    return true;\n  } else {\n    return false;\n  }\n}\n")])])]),t("h6",{attrs:{id:"_1-微信外部支付"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-微信外部支付"}},[e._v("#")]),e._v(" 1. 微信外部支付")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("微信外支付，官方文档也写的很清楚，后端返回一个url地址，前端的工作就是拿到这个url地址进行跳转就可以了")])]),e._v(" "),t("li",[t("p",[e._v("微信外部支付是非常简单，下面是我在项目中的实际代码：")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("onSubmit() {\n    const wxwarrp = await reqWechat(this.order_code, asv_coupon_id, this.token)\n    // reqWechat是我封装好的微信外部支付api\n    if(wxwarrp.status === 1){\n      let url=wxwarrp.url\n      window.location.replace(url)   //这里是后端返回的URL直接进行跳转即可完成微信外支付\n    }else{\n      Toast({\n        message: '支付请求已失效，请重新发起支付',\n        position: 'middle',\n        duration: 1000,\n        forbidClick: true\n      });\n      // 这里的Toast是我使用了Vant插件的一个提示弹窗组件\n      let order_code = this.order_code;\n      let token = this.token;\n      window.location.href = \"https://m.cheduo.com/html/asv/order_det?order_code=\"+order_code+'&token='+token;\n      // 这里是请求失败后直接跳转到订单详情页并提示用户支付失败\n    }\n}\n")])])]),t("h6",{attrs:{id:"_2-微信内部支付"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-微信内部支付"}},[e._v("#")]),e._v(" 2. 微信内部支付")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("微信内部支付的话就要麻烦很多了")])]),e._v(" "),t("li",[t("p",[e._v("首先要获取到openId，然后还要获取到用户的code，之后再根据后台返回来的微信签名、微信签名方式、appId、时间戳、随机串等调起支付。")])]),e._v(" "),t("li",[t("p",[e._v("下面是我在项目中的实际代码：")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("async onPay(){\n    let appID;\n    let result;\n    if(this.radio == '1' && this.isWX) { // 这里是判断用户是否是在微信环境内并选择微信支付\n        let asv_coupon_id = this.getCookie('couponId');\n        if (!asv_coupon_id) {\n          asv_coupon_id = 0;\n        } // 这一段是优惠卷ID的获取\n        try {\n          result = await reqWxopenID(this.code)\n          appID = result.datas.openid;\n          console.log(result, appID);\n          // 这里是获取openId\n        } catch (error) {\n          console.log(error);\n        }\n        const inwx = await reqInwechat(this.order_code, appID, asv_coupon_id, this.token);\n        // 这里是调起微信内部支付的接口api\n        if (inwx.status === 1) {\n          const pay_params = inwx.data\n          if (typeof WeixinJSBridge == \"undefined\"){\n            if(document.addEventListener) {\n              document.addEventListener('WeixinJSBridgeReady', this.onBridgeReady, false);\n            }else if (document.attachEvent){\n              document.attachEvent('WeixinJSBridgeReady', this.onBridgeReady); \n              document.attachEvent('onWeixinJSBridgeReady', this.onBridgeReady);\n            }\n          }else{\n            this.onBridgeReady(pay_params,this);\n          }\n        }else {\n          Toast({\n            message: '支付请求失败',\n            position: 'middle',\n            duration: 1000,\n            forbidClick: true\n          });\n        }\n    }\n},\nonBridgeReady(params,_this,appID) {\n  const pay_params = JSON.parse(params);\n  let res;\n  let appid='wxa9bc2c68483cb54c'; // 这里是appid\n  if (!appID) {\n    async () => {\n      try {\n        res = await reqWxopenID(_this.code)\n        // 获取openId\n      } catch (error) {\n        // console.log(error);\n      }\n      appID = res.data.openid;\n    }\n  }\n  WeixinJSBridge.invoke(\n    'getBrandWCPayRequest', {\n      \"appId\": appid,  //公众号名称，由商户传入     \n      \"timeStamp\": pay_params.timeStamp,  //时间戳，自1970年以来的秒数     \n      \"nonceStr\": pay_params.nonceStr,  //随机串     \n      \"package\": pay_params.package,     \n      \"signType\": pay_params.signType,  //微信签名方式：     \n      \"paySign\": pay_params.paySign  //微信签名 \n    },\n    function(res){\n      // alert(191,'进入微信内部支付了')\n      if(res.err_msg == \"get_brand_wcpay_request:ok\"){\n        Toast('支付成功！');\n        let order_code = _this.order_code;\n        let token = _this.token;\n        window.location.href = \"https://m.cheduo.com/html/asv/order_det?order_code=\"+order_code+'&token='+token;\n      }else if(res.err_msg == 'get_brand_wcpay_request:cancel') {\n        Toast('您已取消支付');\n        let order_code = _this.order_code;\n        let token = _this.token;\n        window.location.href = \"https://m.cheduo.com/html/asv/order_det?order_code=\"+order_code+'&token='+token;\n      } else {\n        Toast('未知错误.错误详情：'+res.err_msg);\n        let order_code = _this.order_code;\n        let token = _this.token;\n        window.location.href = \"https://m.cheduo.com/html/asv/order_det?order_code=\"+order_code+'&token='+token;\n      }\n    }); \n},\n")])])]),t("ul",[t("li",[t("p",[e._v("差点忘了至关重要的一点")])]),e._v(" "),t("li",[t("p",[e._v("就是获取用户code，我在项目中是有一个下订单流程，在下订单后才会跳转到支付页面，所以在微信内部环境时下订单的时候就要通过用户无感登录的方式获取到用户code")])]),e._v(" "),t("li",[t("p",[e._v("代码如下：")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('onOrder() {\n    if (this.$store.state.isWX) {\n      let payUrl = `https://m.cheduo.com/html/paydir/asv-pay?order_code=${order_code}&token=${token}`;\n      // 这里的?order_code=${order_code}&token=${token}是为了向支付页面传参\n      let wxUrl = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxa9bc2c68483cb54c&redirect_uri="+payUrl+"&response_type=code&scope=snsapi_base&state=STATE&connect_redirect=1#wechat_redirect";\n      // 这才是真正的无感登录获取用户code\n      window.location.href = wxUrl;\n      console.log(wxUrl);\n    }else {\n      this.$router.push({ path: \'/paydir/asv-pay\', query: { order_code } })\n    }\n}\n')])])]),t("ul",[t("li",[e._v("至此微信内部支付完成")])])])}),[],!1,null,null,null);n.default=r.exports}}]);