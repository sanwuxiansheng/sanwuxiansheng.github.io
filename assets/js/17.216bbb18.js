(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{216:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" vuex")]),t._v(" "),a("h2",{attrs:{id:"_1-vuex是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-vuex是什么"}},[t._v("#")]),t._v(" 1. vuex是什么")]),t._v(" "),a("pre",[a("code",[t._v("github站点: https://github.com/vuejs/vuex\n在线文档: https://vuex.vuejs.org/zh-cn/\n简单来说: 对应用中组件的状态进行集中式的管理(读/写)\n")])]),t._v(" "),a("h2",{attrs:{id:"_2-状态自管理应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-状态自管理应用"}},[t._v("#")]),t._v(" 2. 状态自管理应用")]),t._v(" "),a("pre",[a("code",[t._v("state: 驱动应用的数据源\nview: 以声明方式将state映射到视图\nactions: 响应在view上的用户输入导致的状态变化(包含n个更新状态的方法)\n")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://vuex.vuejs.org/zh-cn/images/flow.png",alt:"单向数据流"}})]),t._v(" "),a("h2",{attrs:{id:"_3-多组件共享状态的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-多组件共享状态的问题"}},[t._v("#")]),t._v(" 3. 多组件共享状态的问题")]),t._v(" "),a("pre",[a("code",[t._v("多个视图依赖于同一状态\n来自不同视图的行为需要变更同一状态\n以前的解决办法\n\t* 将数据以及操作数据的行为都定义在父组件\n\t* 将数据以及操作数据的行为传递给需要的各个子组件(有可能需要多级传递)\nvuex就是用来解决这个问题的\n")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://vuex.vuejs.org/zh-cn/images/vuex.png",alt:"vuex结构"}})]),t._v(" "),a("h2",{attrs:{id:"_4-vuex的核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-vuex的核心概念"}},[t._v("#")]),t._v(" 4. vuex的核心概念")]),t._v(" "),a("h4",{attrs:{id:"_1-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-state"}},[t._v("#")]),t._v(" 1). state")]),t._v(" "),a("pre",[a("code",[t._v("vuex管理的状态对象\n它应该是唯一的\nconst state = {\n\txxx: initValue\n}\n")])]),t._v(" "),a("h4",{attrs:{id:"_2-mutations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-mutations"}},[t._v("#")]),t._v(" 2). mutations")]),t._v(" "),a("pre",[a("code",[t._v("包含多个直接更新state的方法(回调函数)的对象\n谁来触发: action中的commit('mutation名称')\n只能包含同步的代码, 不能写异步代码\nconst mutations = {\n\tyyy (state, data) { \n\t\t// 更新state的某个属性\n\t}\n}\n")])]),t._v(" "),a("h4",{attrs:{id:"_3-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-actions"}},[t._v("#")]),t._v(" 3). actions")]),t._v(" "),a("pre",[a("code",[t._v("包含多个事件回调函数的对象\n通过执行: commit()来触发mutation的调用, 间接更新state\n谁来触发: 组件中: $store.dispatch('action名称')  // 'zzz'\n可以包含异步代码(定时器, ajax)\nconst actions = {\n\tzzz ({commit, state}, data1) {\n\t\tcommit('yyy', data2)\n\t}\n}\n")])]),t._v(" "),a("h4",{attrs:{id:"_4-getters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-getters"}},[t._v("#")]),t._v(" 4). getters")]),t._v(" "),a("pre",[a("code",[t._v("包含多个计算属性(get)的对象\n谁来读取: 组件中: $store.getters.xxx\nconst getters = {\n\tmmm (state) {\n\t\treturn ...\n\t}\n}\n")])]),t._v(" "),a("h4",{attrs:{id:"_5-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-modules"}},[t._v("#")]),t._v(" 5). modules")]),t._v(" "),a("pre",[a("code",[t._v("包含多个module\n一个module是一个store的配置对象\n与一个组件(包含有共享数据)对应\n")])]),t._v(" "),a("h4",{attrs:{id:"_6-向外暴露store对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-向外暴露store对象"}},[t._v("#")]),t._v(" 6). 向外暴露store对象")]),t._v(" "),a("pre",[a("code",[t._v("export default new Vuex.Store({\n\tstate,\n\tmutations,\n\tactions,\n\tgetters\n})\n")])]),t._v(" "),a("h4",{attrs:{id:"_7-组件中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-组件中"}},[t._v("#")]),t._v(" 7). 组件中:")]),t._v(" "),a("pre",[a("code",[t._v("import {mapGetters, mapActions} from 'vuex'\nexport default {\n\tcomputed: mapGetters(['mmm'])\n\tmethods: mapActions(['zzz'])\n}\n\n"+t._s(t.mmm)+' @click="zzz(data)"\n')])]),t._v(" "),a("h4",{attrs:{id:"_8-映射store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-映射store"}},[t._v("#")]),t._v(" 8). 映射store")]),t._v(" "),a("pre",[a("code",[t._v("import store from './store'\nnew Vue({\n\tstore\n})\n")])]),t._v(" "),a("h4",{attrs:{id:"_9-store对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-store对象"}},[t._v("#")]),t._v(" 9). store对象")]),t._v(" "),a("pre",[a("code",[t._v("1.所有用vuex管理的组件中都多了一个属性$store, 它就是一个store对象\n2.属性:\n  state: 注册的state对象\n  getters: 注册的getters对象\n3.方法:\n  dispatch(actionName, data): 分发action \n")])]),t._v(" "),a("h2",{attrs:{id:"_5-将vuex引到项目中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-将vuex引到项目中"}},[t._v("#")]),t._v(" 5. 将vuex引到项目中")]),t._v(" "),a("h4",{attrs:{id:"_1-下载-npm-install-vuex-save"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-下载-npm-install-vuex-save"}},[t._v("#")]),t._v(" 1). 下载: npm install vuex --save")]),t._v(" "),a("h4",{attrs:{id:"_2-使用vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用vuex"}},[t._v("#")]),t._v(" 2). 使用vuex")]),t._v(" "),a("pre",[a("code",[t._v("1.store.js\n\timport Vuex from 'vuex'\n\texport default new Vuex.Store({\n\t\tstate,\n\t\tmutations,\n\t\tactions,\n\t\tgetters,\n\t\tmodules\n\t})\n2.main.js\n\timport store from './store.js'\n\tnew Vue({\n\t\tstore\n\t})\n")])])])}),[],!1,null,null,null);e.default=r.exports}}]);