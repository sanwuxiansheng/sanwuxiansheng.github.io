(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{219:function(n,e,t){"use strict";t.r(e);var r=t(0),s=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"vue脚手架-路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue脚手架-路由"}},[n._v("#")]),n._v(" vue脚手架&路由")]),n._v(" "),t("h2",{attrs:{id:"_1-vue脚手架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue脚手架"}},[n._v("#")]),n._v(" 1. vue脚手架")]),n._v(" "),t("pre",[t("code",[n._v("用来创建vue项目的工具包\n创建项目:\n    npm install -g vue-cli\n    vue init webpack VueDemo\n开发环境运行:\n    cd VueDemo\n    npm install\n    npm run dev\n生产环境打包发布\n    npm run build\n    npm install -g serve\n    serve dist\n    http://localhost:5000\n")])]),n._v(" "),t("h2",{attrs:{id:"_2-eslint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-eslint"}},[n._v("#")]),n._v(" 2. eslint")]),n._v(" "),t("pre",[t("code",[n._v("用来做项目编码规范检查的工具\n基本原理: 定义了很多规则, 检查项目的代码一旦发现违背了某个规则就输出相应的提示信息\n有相应的配置, 可定制检查\n")])]),n._v(" "),t("h2",{attrs:{id:"_3-组件化编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-组件化编程"}},[n._v("#")]),n._v(" 3. 组件化编程")]),n._v(" "),t("pre",[t("code",[n._v("vue文件包含3个部分\n    <template>\n      <div></div>\n    </template>\n    <script>\n        export default {\n\t\t  props: []/{}\n          data(){},\n\t\t  computed: {}\n          methods: {},\n\t\t  \n\t\t  watch: {}\n\t\t  filters: {}\n\t\t  directives: {}\n\t\t  components: {}\n        }\n    <\/script>\n    <style>\n    </style>\n组件化编码的基本流程\n\t1). 拆分界面, 抽取组件\n\t2). 编写静态组件\n\t3). 编写动态组件\n    \t初始化数据, 动态显示初始化界面\n    \t实现与用户交互功能\n组件通信的5种方式\n\tprops\n\tvue的自定义事件\n\tpubsub第三方库\n\tslot\n\tvuex(后面单独讲)\nprops:\n    父子组件间通信的基本方式\n    属性值的2大类型: \n        一般: 父组件--\x3e子组件\n        函数: 子组件--\x3e父组件\n\t隔层组件间传递: 必须逐层传递(麻烦)\n\t兄弟组件间: 必须借助父组件(麻烦)\nvue自定义事件\n    子组件与父组件的通信方式\n    用来取代function props\n    不适合隔层组件和兄弟组件间的通信\npubsub第三方库(消息订阅与发布)\n    适合于任何关系的组件间通信\nslot\n    通信是带数据的标签\n    注意: 标签是在父组件中解析\nvuex\n    多组件共享状态(数据的管理)\n    组件间的关系也没有限制\n    功能比pubsub强大, 更适用于vue项目\n")])]),n._v(" "),t("h2",{attrs:{id:"_4-ajax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-ajax"}},[n._v("#")]),n._v(" 4. ajax")]),n._v(" "),t("pre",[t("code",[n._v("相关库:\n    vue-resource: vue插件, 多用于vue1.x\n    axios: 第三方库, 多用于vue2.x\nvue-resource使用\n    // 引入模块\n    import VueResource from 'vue-resource'\n    // 使用插件\n    Vue.use(VueResource)\n    \n    // 通过vue/组件对象发送ajax请求\n    this.$http.get('/someUrl').then((response) => {\n      // success callback\n      console.log(response.data) //返回结果数据\n    }, (response) => {\n      // error callback\n      console.log(response.statusText) //错误信息\n    })\naxios使用\n    // 引入模块\n    import axios from 'axios'\n    \n    // 发送ajax请求\n    axios.get(url)\n      .then(response => {\n        console.log(response.data) // 得到返回结果数据\n      })\n      .catch(error => {\n    \tconsole.log(error.message)\n      })\n")])]),n._v(" "),t("h2",{attrs:{id:"_5-vue-router"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue-router"}},[n._v("#")]),n._v(" 5. vue-router")]),n._v(" "),t("pre",[t("code",[n._v("vue用来实现SPA的插件\n使用vue-router\n    1. 创建路由器: router/index.js\n      new VueRouter({\n        routes: [\n          { // 一般路由\n            path: '/about',\n            component: about\n          },\n          { // 自动跳转路由\n            path: '/', \n            redirect: '/about'\n          }\n        ]\n      })\n    2. 注册路由器: main.js\n       import router from './router'\n       \tnew Vue({\n       \t\trouter\n       \t})\n    3. 使用路由组件标签:\n       \t<router-link to=\"/xxx\">Go to XXX</router-link>\n       \t<router-view></router-view>\n编写路由的3步\n    1. 定义路由组件    \n    2. 映射路由\n    3. 编写路由2个标签\n嵌套路由\n    children: [\n        {\n          path: '/home/news',\n          component: news\n        },\n        {\n          path: 'message',\n          component: message\n        }\n     ]\n向路由组件传递数据\n    params: <router-link to=\"/home/news/abc/123\">\n    props: <router-view msg='abc'>\n缓存路由组件\n    <keep-alive>\n      <router-view></router-view>\n    </keep-alive>\n路由的编程式导航\n\tthis.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)\n\tthis.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)\n\tthis.$router.back(): 请求(返回)上一个记录路由")])])])}),[],!1,null,null,null);e.default=s.exports}}]);