(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{225:function(e,n,t){"use strict";t.r(n);var a=t(0),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vue面试相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue面试相关"}},[e._v("#")]),e._v(" vue面试相关")]),e._v(" "),t("h2",{attrs:{id:"_1-slot-插槽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-slot-插槽"}},[e._v("#")]),e._v(" 1. slot/插槽")]),e._v(" "),t("pre",[t("code",[e._v("1. 插槽的作用:\n    父组件向子组件传递标签结构(也可以是数据)\n    通过标签体传递, 而不再是标签属性\n2. slot的分类\n    普通插槽(slot)\n    命名插槽(named slot)\n    作用域插槽(scoped slot)\n3. 区别\n    普通插槽: 子组件只能有一个插槽, 标签体内容在父组件中解析好后(数据在父组件), 传递给这个插槽\n    命名插槽: 子组件有多个指定了name的插槽, 标签体内容在父组件中解析好后(数据在父组件), 分别传递给对应的插槽\n    作用域插槽: 数据在子组件, 子组件有部分结构需要父组件传递, 但父组件需要读取子组件数据\n                子组件需要先向父组件传递数据, 父组件根据数据渲染标签结构后传递给子组件的插槽\n    需求: todo列表组件: 根据内部的todos数据显示todo列表, 但列表项的样式由使用者决定\n")])]),e._v(" "),t("h2",{attrs:{id:"_2-mixin-混合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-mixin-混合"}},[e._v("#")]),e._v(" 2. mixin/混合")]),e._v(" "),t("pre",[t("code",[e._v("1. 作用:\n    复用多个组件重复的JS代码(配置)\n    一个mixin是一个可复用的组件配置对象\n2. 定义mixin\n    var myMixin = {\n      data () {\n        return {\n          a: 'a1111',\n        }\n      },\n      computed: {\n        length () {\n          return this.a.length\n        }\n      }\n    }\n3. 多组件中引入mixin\n    通过mixins配置引用: mixins: [myMixin]\n    mixin中的配置与当前组件的配置会自动合并\n")])]),e._v(" "),t("h2",{attrs:{id:"_3-动态组件-缓存组件-异步组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态组件-缓存组件-异步组件"}},[e._v("#")]),e._v(" 3. 动态组件 / 缓存组件 / 异步组件")]),e._v(" "),t("pre",[t("code",[e._v('1. 动态组件\n    通过<component :is="componentName">来动态决定渲染哪个组件\n    被切换的组件默认会被自动销毁\n2. 缓存组件\n    通过<keep-alive>来缓存被切换的动态组件(非路由组件)\n    也可以缓存路由组件\n3. 异步组件\n    在需要组件时, 才异步请求加载组件的代码(从后台)\n    Vue 能够将组件定义为一个工厂函数(factory function)，此函数可以异步地解析(resolve)组件\n    import()的语法比较适合的是路由组件的异步懒加载\n')])]),e._v(" "),t("h2",{attrs:{id:"_4-原生事件-vue自定义事件-全局事件总线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-原生事件-vue自定义事件-全局事件总线"}},[e._v("#")]),e._v(" 4. 原生事件 / vue自定义事件 / 全局事件总线")]),e._v(" "),t("pre",[t("code",[e._v('1. 什么条件下绑定的原生DOM事件监听?\n    a. 给html标签绑定dom事件监听: <div @click="handleClick">\n    b. 给组件标签绑定dom事件监听(使用.native): <MyCommponent @click.native="handleClick">\n2. 什么条件下绑定的vue自定义事件监听?\n    a. 自定义事件名:  <MyComponent @xxx="handleClick2">\n    b. 与dom事件名同名: <MyComponent @click="handleClick">\n3. 利用vm实现全局eventBus\n    a. 前置知识:\n        Vue原型对象上有3个事件处理的方法: $on() / $emit() / $off()\n        组件对象的原型对象是一个vm对象: 组件对象可以直接访问Vue原型对象上的方法\n    b. 实现\n        创建vm作为全局事件总线对象: Vue.prototype.$bus = new Vue()\n        分发事件/传递数据的组件: this.$bus.$emit(\'eventName\', data)\n        处理事件/接收数据的组件: this.$bus.$on(\'eventName\', (data) => {})\n')])]),e._v(" "),t("h2",{attrs:{id:"_5-使用组件标签上使用v-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用组件标签上使用v-model"}},[e._v("#")]),e._v(" 5. 使用组件标签上使用v-model")]),e._v(" "),t("pre",[t("code",[e._v('1. v-model的本质\n    <input v-model="name">\n    <input :value="name" @input="name = $event.target.value">\n2. 在自定义组件上使用v-model\n    <MyInput v-model="name">\n    MyInput.vue\n        props: [\'value\']\n        <input :value=\'value\' @input="$emit(\'input\', $event.target.value)">\n        =============================\n<input type="text" v-model="msg">\n    <p>'+e._s(e.msg)+'</p>\n    <hr>\n    =================\n        <input type="text" :value="msg" @input="msg=$event.target.value" >\n    <p>'+e._s(e.msg)+'</p>\n    ==========================\n    <Model1></Model1>\n   <hr>\n   <Model2 v-model="msg2"></Model2>\n    <span>'+e._s(e.msg2)+'</span>\n    ===============================\n        <input type="text" :value="value" @input="$emit(\'input\',$event.target.value)">\n        props:[\'value\']\n    =================================\n    <hr>\n     <Model3 :value="msg3" @input="msg3=$event"></Model3>\n    <span>'+e._s(e.msg3)+'</span>\n    ==========================\n    <input type="text" :value="value" @input="$emit(\'input\',$event.target.value)">\n    props:[\'value\']\n    =================================================\n')])]),e._v(" "),t("h2",{attrs:{id:"_6-vue的响应式原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue的响应式原理"}},[e._v("#")]),e._v(" 6. vue的响应式原理")]),e._v(" "),t("pre",[t("code",[e._v("1. 关注点有哪些?\n    vue的数据绑定效果: 组件更新data数据后, 当前组件及相关的子组件都会更新相应的节点\n    如何知道数据变化了?\n    通知哪些组件更新渲染?\n    组件更新渲染是同步还是异步的?\n    \n2. 基本原理\n    在初始化时: 利用Object.defineProperty()给data属性添加 setter 监视数据变化\n    在初始化时: 每个组件实例都有相应的观察者 watcher 对象, 每个属性都关联上所有相关的watcher对象\n    在更新数据后: 对应的setter调用, 通知所有相关的watcher, watcher内异步更新节点或者子组件\n\n3. 一些细节\n    只有data中属性是响应式的, 只在组件对象上的属性不是响应式的\n    data中所有层次属性都是响应式的\n    直接能data中响应式属性对象添加一个新的属性, 默认不是响应式的, 需要用Vue提供的语法添加\n        Vue.set(obj, propName, value)\n        vm.$set(obj, propName, value)\n    vue的异步更新: \n        vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel，\n        如果执行环境不支持，会采用 setTimeout(fn, 0) 代替\n    关于<Root>组件标签: \n        整体应用界面的根标签不是<App>, 而是<Root>, \n        <Root>对应的是vm\n        index页面中的的div元素会被替换, 而不是插入其中\n    组件的data配置不能是对象?\n        组件会被多次使用, 每次使用都会读取data配置值, 如果是对象, 那就会共用一个data对象\n        而函数就没有问题, 因为每次调用函数返回一个新的data对象\n")])]),e._v(" "),t("h2",{attrs:{id:"_7-组件的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-组件的生命周期"}},[e._v("#")]),e._v(" 7. 组件的生命周期")]),e._v(" "),t("p",[e._v("![Image text](7. vue生命周期1.png)")]),e._v(" "),t("pre",[t("code",[e._v("1. vue的生命周期: 创建=>挂载=>更新=>销毁\n2. vue的生命周期勾子:\n    初始化(一次): beforeCreate() => created() => beforeMount() => mounted()\n    更新(n次): beforeUpdate() => updated()\n    销毁(一次): beforeDestroy() => destroyed()\n3. 一些细节\n\tbeforeCreate(): 在实例初始化之后，立即同步调用，在数据观察(data observer)和 event/watcher 配置之前被调用。\n\tcreated(): 可以读取或修改data中的数据, 已经完成数据观察(data observer)和 event/watcher 配置\n\tbeforeMount(): 模板已经在内存中编译, 但还没有挂载到页面上, 不能通过ref找到对应的标签\n\tmounted(): 页面已经初始显示, 可以通过ref找到对应的标签\n\tbeforeUpdate(): 在数据更新之后, 界面更新前调用, 只能访问到原有的界面\n\tupdated(): 在界面更新之后调用, 此时可以访问最新的界面\n\tbeforeDestroy(): 实例销毁之前调用, 此时实例仍然完全可用。\n\tdestroyed(): Vue 实例销毁后调用, 数据绑定/事件监听器都没了, 但dom结构还在\n")])]),e._v(" "),t("h2",{attrs:{id:"_8-正向代理与反向代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-正向代理与反向代理"}},[e._v("#")]),e._v(" 8. 正向代理与反向代理")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/3/16813f90387855c0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}}),e._v("\n​"),t("br"),e._v("\n1. 正向代理\n代理客户端\n隐藏真实的客户，为客户端收发请求，使真实客户端对服务器不可见;\n一个局域网内的所有用户可能被一台服务器做了正向代理，由该台服务器负责 HTTP 请求;\n例子: http-proxy-middleware / 翻墙软件\n2. 反向代理\n代理服务器;\n隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见;\n例子: Nginx 服务器")])])}),[],!1,null,null,null);n.default=r.exports}}]);