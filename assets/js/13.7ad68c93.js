(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{215:function(t,v,e){"use strict";e.r(v);var i=e(0),_=Object(i.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),e("h2",{attrs:{id:"redux-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux-2"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),e("ul",[e("li",[t._v("Redux是什么？\n"),e("ul",[e("li",[t._v("一个状态管理库")])])]),t._v(" "),e("li",[t._v("作用：\n"),e("ul",[e("li",[t._v("集中性管理多个组件的共享状态")])])]),t._v(" "),e("li",[t._v("原则：\n"),e("ul",[e("li",[t._v("单一数据源")]),t._v(" "),e("li",[t._v("数据是只读")]),t._v(" "),e("li",[t._v("使用纯函数更新数据\n"),e("ul",[e("li",[t._v("同样的输入，必定同样的输出")])])])])]),t._v(" "),e("li",[t._v("工作流程：\n"),e("ul",[e("li",[t._v("读取状态\n"),e("ul",[e("li",[t._v("store.getState()")])])]),t._v(" "),e("li",[t._v("更新状态\n"),e("ul",[e("li",[t._v("调用action creators来创建action对象")]),t._v(" "),e("li",[t._v("调用store.dispatch(action),就会触发reducers的调用")]),t._v(" "),e("li",[t._v("reducers(prevState, action)生成新的状态数据")]),t._v(" "),e("li",[t._v("新状态数据会交给store管理（更新了状态）。")]),t._v(" "),e("li",[t._v("此时，之前store绑定过subscribe方法，这个subscribe方法就会触发。执行里面的回调。从而重新渲染组件，会将最新状态数据传入组件中。组件中就能得到最新的状态数据了~")])])])])]),t._v(" "),e("li",[t._v("使用\n"),e("ul",[e("li",[t._v("action-creators\n"),e("ul",[e("li",[t._v("用来创建action对象的工厂函数模块")]),t._v(" "),e("li",[t._v("action: {type: 要操作的类型, data: 操作的数据}")]),t._v(" "),e("li",[t._v("同步：返回值是action对象")]),t._v(" "),e("li",[t._v("异步：返回值是函数。")])])]),t._v(" "),e("li",[t._v("action-types\n"),e("ul",[e("li",[t._v("用来定义action.type类型常量模块")])])]),t._v(" "),e("li",[t._v("reducers\n"),e("ul",[e("li",[t._v("用来根据prevState和action来生成newState")]),t._v(" "),e("li",[t._v("纯函数")])])]),t._v(" "),e("li",[t._v("store\n"),e("ul",[e("li",[t._v("用来集中性管理状态数据")])])]),t._v(" "),e("li",[t._v("在index.js人口文件，需要给App组件包一个Provider，用来根据state变化重新渲染")]),t._v(" "),e("li",[t._v("action-creators -> action-types -> reducers -> 定义容器组件（将redux内容传给UI组件） -> 将之前使用UI组件换成容器组件 -> 在UI组件中使用传入props")])])])])])}),[],!1,null,null,null);v.default=_.exports}}]);