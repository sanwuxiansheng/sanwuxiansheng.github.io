(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{228:function(t,i,a){"use strict";a.r(i);var e=a(0),s=Object(e.a)({},(function(){var t=this,i=t.$createElement,a=t._self._c||i;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),a("h2",{attrs:{id:"_1-git的安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-git的安装"}},[t._v("#")]),t._v(" 1. Git的安装")]),t._v(" "),a("p",[t._v("Windows版的Git，从https://git-scm.com/download/win下载然后按默认选项安装即可。\n安装完成后，右键打开菜单栏找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！\n安装完成后，还需要最后一步设置，在命令行输入：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git config --global user.name "Your Name" \ngit config --global user.email "email@example.com" \ngit config user.name 查看配置的姓名\ngit config user.email 查看配置的邮箱\n')])])]),a("p",[t._v("因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。")]),t._v(" "),a("h2",{attrs:{id:"_2-创建版本库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建版本库"}},[t._v("#")]),t._v(" 2.创建版本库")]),t._v(" "),a("p",[t._v("1)git init初始化版本库\n创建成功会提示 Initialized empty Git repository in c:/Users/熊键/Desktop/0725git/.git/\n没有初始化执行git命令，会提示fatal: Not a git repository (or any of the parent directories): .git\t\t\n你还会发现目录上多出一个.git的文件夹,这个文件夹是Git来跟踪管理版本库的，不要去修改这个文件里的内容。\n2)git add x.txt添加指定文件到仓库中\n不会有任何提示，但是提交成功了\n失败会提示fatal: pathspec 'x.txt' did not match any files\n可能会出现警告，由于linux和window的换行符不一致导致的。\n警告内容：warning: LF will be replaced by CRLF in a.txt.\n解决方式：git config --global core.autocrlf false\n3)怎么查看有没有添加成功呢？\ngit status 红色表示在工作区，绿色表示在暂存区\n4)git commit -m 'xxx'提交所有文件\n提交成功会提示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[master (root-commit) 88bbb64] first commit\n \t1 file changed, 2 insertions(+)\n \tcreate mode 100644 x.txt\n")])])]),a("p",[t._v("如果只输入git commit会出问题，ESC + ：+ wq 退出就好")]),t._v(" "),a("h2",{attrs:{id:"_3-理解工作区-版本区-暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-理解工作区-版本区-暂存区"}},[t._v("#")]),t._v(" 3.理解工作区+版本区+暂存区")]),t._v(" "),a("p",[t._v("*工作区（working Directory）：简单的理解你在电脑里能看到的目录。\n*版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\n*暂存区（stage）：Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。\n*第一步是用git add把文件添加进去，实际上就是将工作区文件添加到暂存区\n*第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支（版本库）")]),t._v(" "),a("h2",{attrs:{id:"_4-git四个常用指令及作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-git四个常用指令及作用"}},[t._v("#")]),t._v(" 4. git四个常用指令及作用")]),t._v(" "),a("ul",[a("li",[t._v("git init 初始化一个空的git仓库")]),t._v(" "),a("li",[t._v("git add a.txt / . / * / -A\n"),a("ul",[a("li",[t._v("将指定文件/全部文件（在工作区的文件）提交到暂存区，暂时保管")])])]),t._v(" "),a("li",[t._v('git commit -m "提交注释"\n'),a("ul",[a("li",[t._v("将暂存区的全部文件提交版本区，进行版本控制")])])]),t._v(" "),a("li",[t._v("git status 查看文件的状态 （红色：工作区   绿色：暂存区    没有显示的文件：版本区）")])]),t._v(" "),a("h2",{attrs:{id:"_5-git的三区的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-git的三区的作用"}},[t._v("#")]),t._v(" 5. git的三区的作用")]),t._v(" "),a("ul",[a("li",[t._v("工作区：写代码的地方（新增、修改、删除等）")]),t._v(" "),a("li",[t._v("暂存区：暂时保管代码的地方（代码还没写完，还不能通过运行的代码）")]),t._v(" "),a("li",[t._v("版本区：最终进行版本控制的地方")])]),t._v(" "),a("h2",{attrs:{id:"_6、git的12个重要指令及作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、git的12个重要指令及作用"}},[t._v("#")]),t._v(" 6、git的12个重要指令及作用")]),t._v(" "),a("ul",[a("li",[t._v("进行本地版本控制")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tgit init  \n\tgit add . / * / -A\t\n\tgit commit -m 'xxx'\n\tgit status \n\t\n\t- 查看版本/对比版本/还原版本\n\tgit diff \n\tgit log\n\tgit reflog\n\tgit reset --hard HEAD^  / git reset --hard xxxx\n\t\n\t- 分支操作\n\tgit checkout -b dev\n\tgit checkout master\n\tgit branch\n\tgit merge dev\n")])])]),a("h2",{attrs:{id:"_7、本地仓库有内容如何提交到远程github仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、本地仓库有内容如何提交到远程github仓库"}},[t._v("#")]),t._v(" 7、本地仓库有内容如何提交到远程github仓库")]),t._v(" "),a("ul",[a("li",[t._v("创建远程仓库")]),t._v(" "),a("li",[t._v("本地：\n"),a("ul",[a("li",[t._v("本地的代码，先进行版本控制（git init   git add .   git commit -m 'xxxx'）")]),t._v(" "),a("li",[t._v("将本地仓库和远程仓库关联起来（只需要一次）  git remote add origin xxxx")]),t._v(" "),a("li",[t._v("将本地代码提交到远程仓库去 git push -u（第一次加就行，第二次不用） origin master")])])])]),t._v(" "),a("h2",{attrs:{id:"_8、远程github仓库有内容如何复制到本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、远程github仓库有内容如何复制到本地"}},[t._v("#")]),t._v(" 8、远程github仓库有内容如何复制到本地")]),t._v(" "),a("ul",[a("li",[t._v("git clone xxxx")]),t._v(" "),a("li",[t._v("问题：只会克隆master分支，但是我们需要dev分支\n"),a("code",[t._v("git fetch origin dev:dev")])])]),t._v(" "),a("h2",{attrs:{id:"_9、-本地有更新，如何给到远程仓库保管？远程仓库有更新，本地如何获取更新？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、-本地有更新，如何给到远程仓库保管？远程仓库有更新，本地如何获取更新？"}},[t._v("#")]),t._v(" 9、 本地有更新，如何给到远程仓库保管？远程仓库有更新，本地如何获取更新？")]),t._v(" "),a("ul",[a("li",[t._v("本地有更新，如何给到远程仓库保管？"),a("br"),t._v(" "),a("code",[t._v("git push origin dev")])]),t._v(" "),a("li",[t._v("远程仓库有更新，本地如何获取更新？\n"),a("code",[t._v("git pull origin dev")])])])])}),[],!1,null,null,null);i.default=s.exports}}]);